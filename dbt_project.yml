# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: "my_new_project"
version: "1.0.0"
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: "app-example-dbt"

# These configurations specify where dbt should look for different types of files.
# The `source-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
source-paths: ["models"]
analysis-paths: ["analysis"]
test-paths: ["tests"]
data-paths: ["data"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target" # directory which will store compiled SQL files
clean-targets: # directories to be removed by `dbt clean`
  - "target"
  - "dbt_modules"

# This is how we generate our meta table with data that will be used by our app refresh query.  It runs the on_run_end macro
on-run-end: "{{ on_run_end(results) }}"

seeds:
  quote_columns: false
  my_new_project:
    users:
      +column_types:
        id: "INT NOT NULL PRIMARY KEY"
        first_name: "VARCHAR(191) NOT NULL"
        last_name: "VARCHAR(191) NOT NULL"
        email: "VARCHAR(191) NOT NULL"
        gender: "VARCHAR(191)"
        ip_address: "VARCHAR(191)"
        avatar: "VARCHAR(191)"
        language: "VARCHAR(191)"
        deactivated: "BOOLEAN"
        created_at: "TIMESTAMP NOT NULL"
        updated_at: "TIMESTAMP NOT NULL"
    purchases:
      +column_types:
        id: "INT NOT NULL PRIMARY KEY"
        user_id: "INT NOT NULL"
        item: "VARCHAR(191) NOT NULL"
        category: "VARCHAR(191) NOT NULL"
        price: "DECIMAL"
        state: "VARCHAR(191)"
        created_at: "TIMESTAMP NOT NULL"

# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  materialized: view
